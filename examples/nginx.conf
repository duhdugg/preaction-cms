# This is an example nginx configuration for Preaction CMS.

user www-data;
worker_processes auto;
pid /run/nginx.pid;
include /etc/nginx/modules-enabled/*.conf;

events {
    worker_connections 768;
}

http {
    sendfile on;
    tcp_nopush on;
    tcp_nodelay on;
    keepalive_timeout 65;
    types_hash_max_size 2048;
    include /etc/nginx/mime.types;
    default_type application/octet-stream;
    ssl_protocols TLSV1 TLSv1.1 TLSv1.2;
    ssl_prefer_server_ciphers on;
    access_log /var/log/nginx/access.log;
    error_log /var/log/nginx/error.log;

    # you should enable gzip
    gzip on;
    gzip_types text/plain text/css application/json application/javascript text/xml application/xml application/xml+rss text/javascript image/svg+xml;

    include /etc/nginx/conf.d/*.conf;

    # instead of using the server block below, you may decide to use a separate
    # configuration file that is specific to the hostname
    # and place it within the sites-enabled directory
    # see examples/nginx-nonempty-root.conf as example
    include /etc/nginx/sites-enabled/*;

    client_max_body_size 50M;

    server {
        server_name example.com www.example.com;

        root /var/www/preaction-cms;

        location / {
            proxy_pass http://localhost:8999;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection 'upgrade';
            proxy_set_header Host $host;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_cache_bypass $http_upgrade;
        }
        location /icon {
            rewrite ^/icon/(.*)$ /$1 break;
            proxy_cache_bypass 1;
            root /var/www/example.com/build/icon;
        }
        location /static {
            rewrite ^/static/(.*)$ /$1 break;
            proxy_cache_bypass 1;
            root /var/www/example.com/build/static;
        }
        location /uploads {
            rewrite ^/uploads/(.*)$ /$1 break;
            proxy_cache_bypass 1;
            root /var/www/example.com/uploads;
        }

        # redirect all non-https traffic to https
        if ($scheme != "https") {
            return 302 https://$host$request_uri;
        }
        # you may want www.example.com to redirect to example.com
        if ($host = "www.example.com") {
            return 302 https://example.com$request_uri;
        }

    # re: HTTPS. The below lines are managed by Certbot.
    # see instructions here: https://certbot.eff.org/instructions
    listen 80; # managed by Certbot
    listen 443 ssl; # managed by Certbot
    ssl_certificate /etc/letsencrypt/live/example.com/fullchain.pem; # managed by Certbot
    ssl_certificate_key /etc/letsencrypt/live/example.com/privkey.pem; # managed by Certbot
    include /etc/letsencrypt/options-ssl-nginx.conf; # managed by Certbot
    ssl_dhparam /etc/letsencrypt/ssl-dhparams.pem; # managed by Certbot
    }
}

# vim: set ft=nginx:
